# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
import json
import os

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from bestseller import create_bestseller_content  # Import the function
from payment_Method import create_payment_method_content

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets/frame4")
DATABASE_PATH = OUTPUT_PATH / Path("database.json")  # Ensure this path is correct

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def load_items():
    with open(DATABASE_PATH, 'r') as file:
        data = json.load(file)
        return data.get("items", {})

items = load_items()  # Load items from database

def save_cart(cart):
    with open(DATABASE_PATH, 'r+') as file:
        data = json.load(file)
        data["cart"] = cart
        file.seek(0)
        json.dump(data, file)
        file.truncate()

def load_cart():
    with open(DATABASE_PATH, 'r') as file:
        data = json.load(file)
        return data.get("cart", [])

cart = load_cart()  # Load cart from database

def remove_from_cart(item_name):
    global cart
    cart = [item for item in cart if item["item"] != item_name]
    save_cart(cart)
    print(f"Removed {item_name} from cart. Current cart: {cart}")
    create_cart_content(window_instance)  # Refresh the cart content

def save_items(items):
    with open(DATABASE_PATH, 'r+') as file:
        data = json.load(file)
        data["items"] = items
        file.seek(0)
        json.dump(data, file)
        file.truncate()

def update_stock(item_name, quantity):
    items = load_items()
    if item_name in items:
        items[item_name]["stock"] -= quantity
        save_items(items)
        # Removed the print statement
    else:
        print(f"Item {item_name} not found in items.")

def add_to_cart(item_name, quantity=1):
    cart = load_cart()  # Load cart from database
    items = load_items()  # Load items from database
    if items[item_name]["stock"] < quantity:
        print(f"Not enough stock for {item_name}. Available stock: {items[item_name]['stock']}")
        return
    for item in cart:
        if item["item"] == item_name:
            item["quantity"] += quantity
            save_cart(cart)
            print(f"Updated {item_name} quantity to {item['quantity']}. Current cart: {cart}")
            return
    cart.append({"item": item_name, "quantity": quantity})
    save_cart(cart)
    print(f"Added {quantity} x {item_name} to cart. Current cart: {cart}")

def checkout():
    try:
        create_payment_method_content(window_instance)
    except ModuleNotFoundError as e:
        print(f"Failed to import payment_method: {e}")

def create_cart_content(window, page=0):
    global window_instance, items, cart
    window_instance = window  # Store the window instance
    items = load_items()  # Refresh items from database
    cart = load_cart()  # Refresh cart from database
    for widget in window.winfo_children():
        widget.destroy()  # Clear existing content

    window.geometry("507x782")
    window.configure(bg = "#FFFFFF")

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 782,
        width = 507,
        bd = 0,
        highlightthickness=0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    button_image_1 = PhotoImage(
        file=relative_to_assets("button_10.png"))
    button_1 = Button(
        window,  # Ensure the button is added to the window
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: create_cart_content(window, page + 1),  # Navigate to next page
        relief="flat"
    )
    button_1.place(
        x=255.620849609375,
        y=717.3338356018066,
        width=56.0,
        height=53.0
    )

    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        window,  # Ensure the button is added to the window
        image=button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: create_cart_content(window, page - 1) if page > 0 else None,  # Navigate to previous page
        relief="flat"
    )
    button_9.place(
        x=180.620849609375,
        y=717.3338356018066,
        width=56.0,
        height=53.0
    )

    canvas.create_text(
        205.541259765625,
        21.412181854248047,
        anchor="nw",
        text="Your cart",
        fill="#000000",
        font=("Abril Fatface", 21 * -1)
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_2 = Button(
        window,  # Ensure the button is added to the window
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: create_bestseller_content(window),  # Navigate to bestseller content
        relief="flat"
    )
    button_2.place(
        x=39.069580078125,
        y=720.2427101135254,
        width=83.83250427246094,
        height=38.94280242919922
    )

    button_image_checkout = PhotoImage(
        file=relative_to_assets("button_2.png"))  # Use the correct image file

    button_checkout = Button(
        window,
        image=button_image_checkout,
        borderwidth=0,
        highlightthickness=0,
        command=checkout,  # Call the checkout function to navigate to payment method
        relief="flat"
    )
    button_checkout.place(
        x=350,
        y=720,
        width=100,
        height=50
    )

    button_image_remove = PhotoImage(
        file=relative_to_assets("button_13.png"))

    canvas.create_rectangle(
        -0.4979572594165802,
        697.3169939456391,
        507.94146728515625,
        697.9184303283691,
        fill="#000000",
        outline="")

    y_position = 100  # Starting y position for items
    max_y_position = 600  # Maximum y position to avoid crowding
    items_per_page = 10  # Number of items per page

    start_index = page * items_per_page
    end_index = start_index + items_per_page

    for item in cart[start_index:end_index]:
        item_name = item["item"]
        quantity = item["quantity"]
        price = items[item_name]["price"]
        total_price = price * quantity

        canvas.create_text(
            50,
            y_position,
            anchor="nw",
            text=f"{item_name}",
            fill="#000000",
            font=("Abril Fatface", 18 * -1)
        )

        canvas.create_text(
            200,
            y_position,
            anchor="nw",
            text=f"x{quantity}",
            fill="#000000",
            font=("Abril Fatface", 18 * -1)
        )

        canvas.create_text(
            350,
            y_position,
            anchor="nw",
            text=f"Php {total_price}",
            fill="#DCB21C",
            font=("Abril Fatface", 18 * -1)
        )

        button_remove = Button(
            window,
            image=button_image_remove,
            borderwidth=0,
            highlightthickness=0,
            command=lambda item_name=item_name: remove_from_cart(item_name),
            relief="flat"
        )
        button_remove.place(
            x=450,
            y=y_position - 10,
            width=30,
            height=30
        )

        y_position += 50  # Increment y position for the next item

    # Keep a reference to the images to prevent garbage collection
    window.button_images = [button_image_1, button_image_2, button_image_remove, button_image_9, button_image_checkout]

    window.resizable(False, False)

def update_cart_content(window, page=0):
    global window_instance, items, cart
    window_instance = window  # Store the window instance
    items = load_items()  # Refresh items from database
    cart = load_cart()  # Refresh cart from database
    canvas = window.children['!canvas']  # Correctly reference the canvas
    y_position = 100  # Starting y position for items
    max_y_position = 600  # Maximum y position to avoid crowding
    items_per_page = 10  # Number of items per page

    start_index = page * items_per_page
    end_index = start_index + items_per_page

    for item in cart[start_index:end_index]:
        item_name = item["item"]
        quantity = item["quantity"]
        price = items[item_name]["price"]
        total_price = price * quantity

        canvas.create_text(
            50,
            y_position,
            anchor="nw",
            text=f"{item_name}",
            fill="#000000",
            font=("Abril Fatface", 18 * -1)
        )

        canvas.create_text(
            200,
            y_position,
            anchor="nw",
            text=f"x{quantity}",
            fill="#000000",
            font=("Abril Fatface", 18 * -1)
        )

        canvas.create_text(
            350,
            y_position,
            anchor="nw",
            text=f"Php {total_price}",
            fill="#DCB21C",
            font=("Abril Fatface", 18 * -1)
        )

        button_remove = Button(
            window,
            image=window.button_images[2],
            borderwidth=0,
            highlightthickness=0,
            command=lambda item_name=item_name: remove_from_cart(item_name),
            relief="flat"
        )
        button_remove.place(
            x=450,
            y=y_position - 10,
            width=30,
            height=30
        )

        y_position += 50  # Increment y position for the next item

    window.after(1000, lambda: update_cart_content(window, page))  # Update cart content every second

if __name__ == "__main__":
    window = Tk()
    create_cart_content(window)
    update_cart_content(window)
    window.mainloop()
